{"version":3,"sources":["components/VideoList/VideoListItem/VideoListItem.jsx","components/VideoList/VideoList.jsx","components/VideoPlayer/VideoPlayer.jsx","components/VideoDescription/VideoDescription.jsx","components/Navigation/HamburgerMenu.jsx","pages/Home/Home.jsx","App.js","index.js"],"names":["VideoListItem","_ref","video","onVideoSelect","_jsx","className","onClick","children","src","thumbnail_filename","alt","video_menu_title","rightArrowIcon","leftArrowIcon","ArrowButton","direction","currentIcon","setCurrentIcon","useState","concat","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","VideoList","_ref2","videos","listRef","useRef","scroll","current","scrollDistance","window","innerWidth","scrollBy","left","behavior","_jsxs","ref","map","index","VideoPlayer","videoUrl","isPlaying","setIsPlaying","videoRef","useEffect","style","position","type","controls","handlePlayButton","play","VideoDescription","video_desc_keywords","video_desc_title","video_desc_content1","video_desc_content2","HamburgerMenu","isOpen","toggleMenu","metaInfo","onMenuSelect","Object","entries","menuIdx","videoList","menuName","Home","_videos$find","setMetaInfo","setVideos","selectedVideo","setSelectedVideo","menuOpen","setMenuOpen","selectedMenuIdx","setSelectedMenuIdx","selectedMenuName","setSelectedMenuName","navigator","serviceWorker","register","then","registration","console","log","scope","catch","error","length","firstMenu","fetch","response","json","data","metaArray","video_filename","handleMenuSelect","selectedMenuVideos","_Fragment","video_root","find","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d28547ca.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport './VideoListItem.css' // 가정하는 CSS 파일 경로\nlet thumbnail_root = '/xrshowroom-ref/assets/images/'\n\nconst VideoListItem = ({ video, onVideoSelect }) => {\n  return (\n    <div className=\"video-list-item\" onClick={() => onVideoSelect(video)}>\n      <img className=\"video-thumbnail\" src={thumbnail_root + video.thumbnail_filename} alt={video.video_menu_title} />\n    </div>\n  )\n}\n\n// PropTypes를 사용하여 props의 타입을 지정\nVideoListItem.propTypes = {\n  video: PropTypes.shape({\n    video_desc_title: PropTypes.string.isRequired,\n    video_desc_content1: PropTypes.string,\n    video_desc_content2: PropTypes.string,\n    thumbnail_filename: PropTypes.string.isRequired,\n  }).isRequired,\n  onVideoSelect: PropTypes.func.isRequired,\n}\n\nexport default VideoListItem\n","import React, { useState, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport VideoListItem from './VideoListItem/VideoListItem'\nimport './VideoList.css'\n\nconst rightArrowIcon = '/xrshowroom-ref/assets/images/arrow_white_right.png'\nconst leftArrowIcon = '/xrshowroom-ref/assets/images/arrow_white_left.png'\nconst rightHoverArrowIcon = '/xrshowroom-ref/assets/images/arrow_blue_right.png'\nconst leftHoverArrowIcon = '/xrshowroom-ref/assets/images/arrow_blue_left.png'\n\nconst ArrowButton = ({ direction, onClick }) => {\n  const [currentIcon, setCurrentIcon] = useState(direction === 'right' ? rightArrowIcon : leftArrowIcon)\n\n  const handleMouseEnter = () => {\n    setCurrentIcon(direction === 'right' ? rightHoverArrowIcon : leftHoverArrowIcon)\n  }\n\n  const handleMouseLeave = () => {\n    setCurrentIcon(direction === 'right' ? rightArrowIcon : leftArrowIcon)\n  }\n\n  return (\n    <button\n      className={`arrow-button-${direction}`}\n      onClick={onClick}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <img src={currentIcon} alt={direction} />\n    </button>\n  )\n}\n\nconst VideoList = ({ videos, onVideoSelect }) => {\n  const listRef = useRef(null)\n\n  const scroll = (direction) => {\n    const { current } = listRef\n    if (current) {\n      const scrollDistance = window.innerWidth / 4.39\n      current.scrollBy({\n        left: direction === 'left' ? -scrollDistance : scrollDistance,\n        behavior: 'smooth',\n      })\n    }\n  }\n\n  return (\n    <div className=\"video-list-background\">\n      <div className=\"video-list-container\">\n        <ArrowButton direction=\"left\" onClick={() => scroll('left')} />\n        <div className=\"video-list\" ref={listRef}>\n          {videos.map((video, index) => (\n            <VideoListItem key={index} video={video} onVideoSelect={onVideoSelect} />\n          ))}\n        </div>\n        <ArrowButton direction=\"right\" onClick={() => scroll('right')} />\n      </div>\n    </div>\n  )\n}\n\nVideoList.propTypes = {\n  videos: PropTypes.arrayOf(\n    PropTypes.shape({\n      video_desc_title: PropTypes.string.isRequired,\n      video_desc_content1: PropTypes.string,\n      video_desc_content2: PropTypes.string,\n      thumbnail_filename: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  onVideoSelect: PropTypes.func.isRequired,\n}\n\nexport default VideoList\n","import React, { useState, useRef, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport './VideoPlayer.css' // 가정하는 CSS 파일 경로\nconst playButtonImage = '/xrshowroom-ref/assets/images/play.png'\n\nconst VideoPlayer = ({ videoUrl }) => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const videoRef = useRef(null)\n\n  // videoUrl 변경 감지 및 재생 상태 리셋\n  useEffect(() => {\n    setIsPlaying(false)\n  }, [videoUrl])\n\n  const handlePlayButton = () => {\n    setIsPlaying(true)\n    if (videoRef.current) {\n      videoRef.current.play()\n    }\n  }\n\n  return (\n    <div className=\"video-player-container\" style={{ position: 'relative' }}>\n      <video\n        ref={videoRef}\n        className=\"video-player\"\n        src={videoUrl}\n        type=\"video/webm\"\n        controls={isPlaying} // 재생 중일 때만 컨트롤 표시\n      ></video>\n\n      {!isPlaying && <img src={playButtonImage} alt=\"Play\" className=\"play-button\" onClick={handlePlayButton} />}\n    </div>\n  )\n}\n\n// PropTypes를 사용하여 props의 타입을 지정\nVideoPlayer.propTypes = {\n  videoUrl: PropTypes.string.isRequired,\n}\n\nexport default VideoPlayer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './VideoDescription.css' // 가정하는 CSS 파일 경로\nconst desc_line = '/xrshowroom-ref/assets/images/desc_line.png'\n\nconst VideoDescription = ({ video_desc_keywords, video_desc_title, video_desc_content1, video_desc_content2 }) => {\n  return (\n    <div className=\"video-description-container\">\n      <div className=\"keyword-tag\">{video_desc_keywords}</div>\n      <div className=\"video-desc-title\">{video_desc_title}</div>\n      <div className=\"video-desc-content1\">{video_desc_content1}</div>\n      <div className=\"video-description-line\">\n        <img src={desc_line} alt=\"line\" />\n      </div>\n      <div className=\"video-desc-content2\">{video_desc_content2}</div>\n      {/* 여기에 추가적인 메타데이터를 표시할 수 있는 요소들을 넣을 수 있습니다. */}\n    </div>\n  )\n}\n\n// PropTypes를 사용하여 props의 타입을 지정\nVideoDescription.propTypes = {\n  video_desc_title: PropTypes.string.isRequired,\n  video_desc_content1: PropTypes.string,\n  video_desc_content2: PropTypes.string,\n}\n\nexport default VideoDescription\n","import React, { useState, useEffect } from 'react'\nimport './HamburgerMenu.css' // 가정하는 CSS 파일 경로\nconst menuImage = '/xrshowroom-ref/assets/images/hamburger.png'\nconst menuCloseImage = '/xrshowroom-ref/assets/images/close.png'\nconst HamburgerMenu = ({ isOpen, toggleMenu, metaInfo, onMenuSelect }) => {\n  return (\n    <div>\n      <button className=\"menu-button\" onClick={toggleMenu}>\n        <img src={menuImage} alt=\"menu_button\" />\n      </button>\n\n      {isOpen && (\n        <div className=\"menu-list-section\">\n          <div>\n            <button className=\"menu-close-button\" onClick={toggleMenu}>\n              <img src={menuCloseImage} alt=\"menu_close\" />\n            </button>\n          </div>\n          <div>\n            {Object.entries(metaInfo).map(([menuIdx, videoList]) => {\n              return (\n                <div key={menuIdx}>\n                  <div\n                    className=\"menu-button-category\"\n                    onClick={() => {\n                      toggleMenu()\n                      onMenuSelect(videoList.menuName, videoList.videos)\n                    }}\n                  >\n                    {videoList.menuName}\n                  </div>\n                  <ul className=\"menu-button-video-ul\">\n                    {videoList.videos.map((video) => (\n                      <ul key={video.video_menu_title}>{video.video_menu_title}</ul>\n                    ))}\n                  </ul>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default HamburgerMenu\n","import React, { useState, useEffect } from 'react'\nimport VideoList from '../../components/VideoList/VideoList'\nimport VideoPlayer from '../../components/VideoPlayer/VideoPlayer'\nimport VideoDescription from '../../components/VideoDescription/VideoDescription'\nimport HamburgerMenu from '../../components/Navigation/HamburgerMenu'\nimport './Home.css' // 홈 페이지 전용 스타일\nconst logo = '/xrshowroom-ref/assets/images/AiVATAR_logo.png' // 로고 이미지 경로를 올바르게 설정하세요\nlet video_root = 'https://azureasset.aivatar.ai/aivatar/xrshowroom/'\nconst Home = () => {\n  const [metaInfo, setMetaInfo] = useState([]) // 비디오 목록 상태\n  const [videos, setVideos] = useState([]) // 비디오 목록 상태\n  const [selectedVideo, setSelectedVideo] = useState(null) // 선택된 비디오 상태\n  const [menuOpen, setMenuOpen] = useState(false) // 메뉴 상태\n  const [selectedMenuIdx, setSelectedMenuIdx] = useState(null)\n  const [selectedMenuName, setSelectedMenuName] = useState(null)\n  useEffect(() => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker\n        .register('./service-worker.js')\n        .then(function (registration) {\n          console.log('Service Worker registered with scope:', registration.scope)\n        })\n        .catch(function (error) {\n          console.log('Service Worker registration failed:', error)\n        })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (metaInfo.length > 0) {\n      // 첫 번째 메뉴의 정보를 가져옵니다.\n      const firstMenu = metaInfo[0]\n      setSelectedMenuName(firstMenu.menuName)\n      setVideos(firstMenu.videos)\n      if (firstMenu.videos.length > 0) {\n        setSelectedVideo(firstMenu.videos[0]) // 첫 번째 메뉴의 첫 번째 비디오를 선택합니다.\n      }\n    }\n  }, [metaInfo]) // 의존성 배열에 metaInfo를 포함\n  useEffect(() => {\n    fetch('/xrshowroom-ref/assets/video_meta.json')\n      .then((response) => response.json())\n      .then((data) => {\n        const metaArray = Object.entries(data).map(([menuName, videos], menuIdx) => {\n          const transformedVideos = videos.map((video) => {\n            return {\n              video_menu_title: video.video_menu_title,\n              video_desc_content1: video.video_desc_content1,\n              video_desc_content2: video.video_desc_content2,\n              thumbnail_filename: video.thumbnail_filename,\n              video_desc_title: video.video_desc_title,\n              video_desc_keywords: video.video_desc_keywords,\n              video_filename: video.video_filename,\n            }\n          })\n\n          return {\n            menuIdx,\n            menuName,\n            videos: transformedVideos,\n          }\n        })\n        console.log('&&&&', metaArray[0]['videos'])\n        console.log('&&&&')\n        setMetaInfo(metaArray)\n        setVideos(metaArray[0]['videos'])\n      })\n      .catch((error) => console.error('Error fetching video data:', error))\n  }, [])\n\n  const handleVideoSelect = (video) => {\n    setSelectedVideo(video) // 비디오 선택 처리\n  }\n\n  const toggleMenu = () => {\n    setMenuOpen(!menuOpen) // 메뉴 토글 처리\n  }\n\n  const handleMenuSelect = (menuName, videos) => {\n    setSelectedMenuName(menuName)\n\n    const selectedMenuVideos = videos\n    console.log('Selected Menu Videos////////////:', selectedMenuVideos) // 여기에서 값 확인\n\n    if (selectedMenuVideos && selectedMenuVideos.length > 0) {\n      setSelectedVideo(selectedMenuVideos[0])\n    } else {\n      setSelectedVideo(null)\n    }\n  }\n\n  return (\n    <div className=\"home\">\n      <header>\n        <div className=\"header-logo\">\n          <img src={logo} alt=\"Logo\" />\n        </div>\n        <HamburgerMenu isOpen={menuOpen} toggleMenu={toggleMenu} metaInfo={metaInfo} onMenuSelect={handleMenuSelect} />\n      </header>\n\n      <main>\n        <div className=\"body-background\">\n          <div className=\"video-content\">\n            {selectedVideo && (\n              <>\n                <div className=\"video-player-section\">\n                  <VideoPlayer videoUrl={video_root + '/' + selectedVideo.video_filename} />\n                </div>\n                <div className=\"video-description-section\">\n                  <VideoDescription\n                    video_desc_keywords={selectedVideo.video_desc_keywords}\n                    video_desc_title={selectedVideo.video_desc_title}\n                    video_desc_content1={selectedVideo.video_desc_content1}\n                    video_desc_content2={selectedVideo.video_desc_content2}\n                  />\n                </div>\n              </>\n            )}\n          </div>\n          {/* 선택된 메뉴에 해당하는 비디오 목록을 표시 */}\n\n          {selectedMenuName &&\n            (console.log(\n              'Filtered Videos for Selected Menu:',\n              videos.find((video) => video.menuName === selectedMenuName)?.videos || []\n            ),\n            (<VideoList videos={videos} onVideoSelect={handleVideoSelect} />))}\n        </div>\n      </main>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react';\nimport Home from './pages/Home/Home';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}